#version 430

const int overlap_mode_vertical = 0;
const int overlap_mode_horizontal = 1;
const int overlap_mode_corners = 2;

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r32f) uniform coherent image2D water_heightmap;
layout(binding = 1, r32f) uniform coherent image2D border_data;

uniform int overlap_mode;

void main()
{
    uvec2 border_data_size = imageSize(border_data);
    uvec2 water_heightmap_size = imageSize(water_heightmap);

    ivec2 global_idx;
    global_idx.x = int(gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x); // + 1 for padding
    global_idx.y = int(gl_WorkGroupID.y * gl_WorkGroupSize.y + gl_LocalInvocationID.y); // + 1 for padding

    bool valid = global_idx.x < int(border_data_size.x) && global_idx.y < int(border_data_size.y);

    if(valid)
    {
        float value = imageLoad(border_data, global_idx).x;
        int index_x = global_idx.x;
        int index_y = global_idx.y;
        if(overlap_mode == overlap_mode_vertical)
        {
            if(global_idx.x % 2 == 0) // LEFT
            {
                index_x = (global_idx.x/2) * int(gl_WorkGroupSize.x) - 1;
            }
            else // RIGHT
            {
                index_x = ((global_idx.x+1)/2) * int(gl_WorkGroupSize.x);
            }
        }
        else if(overlap_mode == overlap_mode_horizontal)
        {
            if(global_idx.y % 2 == 0) // TOP
            {
                index_y = (global_idx.y/2) * int(gl_WorkGroupSize.y) - 1;
            }
            else // BOTTOM
            {
                index_y = ((global_idx.y+1)/2) * int(gl_WorkGroupSize.y);
            }
        }
        else if(overlap_mode == overlap_mode_corners)
        {
            if(global_idx.y % 2 == 0) // TOP
            {
                index_y = (global_idx.y/2) * int(gl_WorkGroupSize.y) - 1;
            }
            else // BOTTOM
            {
                index_y = ((global_idx.y+1)/2) * int(gl_WorkGroupSize.y);
            }

            if(global_idx.x % 2 == 0) // LEFT
            {
                index_x = (global_idx.x/2) * int(gl_WorkGroupSize.x) - 1;
            }
            else // RIGHT
            {
                index_x = ((global_idx.x+1)/2) * int(gl_WorkGroupSize.x);
            }
        }

        if(index_x >= 0 && index_x < water_heightmap_size.x &&
            index_y >= 0 && index_y < water_heightmap_size.y)
        {
            ivec2 dest_idx = ivec2(index_x, index_y);
            imageStore(water_heightmap, dest_idx, vec4(imageLoad(water_heightmap, dest_idx).x + value,0,0,0));
        }
    }

    barrier();
    memoryBarrierImage();
}

