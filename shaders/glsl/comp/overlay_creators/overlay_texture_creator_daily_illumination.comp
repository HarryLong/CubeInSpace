#version 430

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform coherent image2D resulting_overlay;

uniform sampler2D illumination_texture;

vec4 daily_illumination_to_output_color(in uint daily_illumination)
{
    float intensity = float(daily_illumination)/12;
    return vec4(intensity,intensity,intensity,.7);
}

uint ui_unnormalize(in float normalized)
{
     return uint(normalized*255.0);
}

float ui_normalize(in uint normalized)
{
     return float(normalized)/255.0;
}

void main()
{
    ivec2 global_idx;
    global_idx.x = int(gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x); // + 1 for padding
    global_idx.y = int(gl_WorkGroupID.y * gl_WorkGroupSize.y + gl_LocalInvocationID.y); // + 1 for padding

    uvec2 heightmap_size = imageSize(resulting_overlay);
    bool valid = global_idx.x < int(heightmap_size.x) && global_idx.y < int(heightmap_size.y);

    if(valid)
    {
        vec2 texture_coord = vec2(float(global_idx.x)/(heightmap_size.x-1), float(global_idx.y)/(heightmap_size.y-1));

        uint daily_illumination = ui_unnormalize(texture(illumination_texture, texture_coord).r);
        vec4 resulting_color = daily_illumination_to_output_color(daily_illumination);

        imageStore(resulting_overlay, global_idx, resulting_color);
    }

    memoryBarrierImage();
    barrier();
}

