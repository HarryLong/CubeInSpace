#version 430

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform coherent image2D resulting_overlay;
const vec4 color_at_minus_fifty_degrees = vec4(0,0,1,.7);
const vec4 color_at_plus_fifty_degrees = vec4(1,0,0,.7);

uniform int month;
uniform sampler2DArray temperature_texture;

vec4 temp_to_output_color(in float temperature)
{
    float color_at_plus_fifty_degrees_percentage = (temperature+50)/100.0;
    float color_at_minus_fifty_degrees_percentage = 1-color_at_plus_fifty_degrees_percentage;

    return (color_at_plus_fifty_degrees_percentage * color_at_plus_fifty_degrees) +
                (color_at_minus_fifty_degrees_percentage * color_at_minus_fifty_degrees);
}

void main()
{
    ivec2 global_idx;
    global_idx.x = int(gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x); // + 1 for padding
    global_idx.y = int(gl_WorkGroupID.y * gl_WorkGroupSize.y + gl_LocalInvocationID.y); // + 1 for padding

    uvec2 heightmap_size = imageSize(resulting_overlay);
    bool valid = global_idx.x < int(heightmap_size.x) && global_idx.y < int(heightmap_size.y);

    if(valid)
    {
        vec4 resulting_color = vec4(0,0,0,0);
        vec2 texture_coord = vec2(float(global_idx.x)/heightmap_size.x, float(global_idx.y)/heightmap_size.y);

        float jun_temperature = texture(temperature_texture, vec3(texture_coord,0)).r * 127;
        float dec_temperature = texture(temperature_texture, vec3(texture_coord,1)).r * 127;
        float temp_diff = jun_temperature - dec_temperature;
        float jun_percentage = (6.0-(abs(6-month)))/6.0;
        float temperature = dec_temperature + (jun_percentage * temp_diff);
        resulting_color = temp_to_output_color(temperature);

        imageStore(resulting_overlay, global_idx, resulting_color);
    }

    memoryBarrierImage();
    barrier();
}

