#version 430

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform coherent image2D resulting_overlay;

uniform int month;

uniform vec4 COLORS[ 216 ] = {
vec4(0.8,0.4,0.0,1.0), vec4(0.6,0.4,0.4,1.0), vec4(0.0,0.2,0.4,1.0), vec4(1.0,1.0,0.4,1.0), vec4(0.0,0.6,1.0,1.0), vec4(1.0,0.0,0.0,1.0),
vec4(0.8,0.2,0.0,1.0), vec4(1.0,0.4,0.8,1.0), vec4(0.0,0.8,0.4,1.0), vec4(0.8,0.4,1.0,1.0), vec4(0.4,0.8,0.6,1.0), vec4(0.6,1.0,1.0,1.0),
vec4(0.6,0.8,0.6,1.0), vec4(0.6,0.0,0.0,1.0), vec4(1.0,1.0,1.0,1.0), vec4(0.6,1.0,0.6,1.0), vec4(0.6,0.4,0.6,1.0), vec4(0.8,1.0,0.6,1.0),
vec4(1.0,1.0,0.0,1.0), vec4(0.6,0.2,0.2,1.0), vec4(0.8,0.6,0.0,1.0), vec4(0.6,1.0,0.4,1.0), vec4(0.2,0.0,0.8,1.0), vec4(0.8,1.0,0.4,1.0),
vec4(0.4,0.2,0.8,1.0), vec4(0.8,0.8,0.6,1.0), vec4(0.8,0.0,0.4,1.0), vec4(0.6,0.0,0.6,1.0), vec4(0.4,1.0,0.2,1.0), vec4(0.0,0.6,0.4,1.0),
vec4(0.8,0.4,0.6,1.0), vec4(1.0,0.0,1.0,1.0), vec4(0.0,1.0,0.4,1.0), vec4(0.6,0.6,0.6,1.0), vec4(0.0,0.0,1.0,1.0), vec4(0.4,1.0,0.0,1.0),
vec4(0.8,0.0,1.0,1.0), vec4(1.0,0.8,0.6,1.0), vec4(0.0,0.4,0.6,1.0), vec4(0.2,0.4,0.6,1.0), vec4(0.6,0.6,0.8,1.0), vec4(0.6,1.0,0.2,1.0),
vec4(0.4,0.0,0.0,1.0), vec4(0.4,0.0,0.2,1.0), vec4(0.4,0.4,0.0,1.0), vec4(0.2,1.0,0.2,1.0), vec4(0.4,0.2,0.4,1.0), vec4(0.4,0.6,0.8,1.0),
vec4(0.4,1.0,0.4,1.0), vec4(0.6,0.0,0.4,1.0), vec4(0.6,0.2,0.0,1.0), vec4(0.2,0.8,0.0,1.0), vec4(0.8,0.6,1.0,1.0), vec4(0.2,0.0,0.2,1.0),
vec4(0.2,1.0,0.6,1.0), vec4(1.0,0.8,0.4,1.0), vec4(0.8,1.0,0.8,1.0), vec4(0.0,0.2,1.0,1.0), vec4(0.2,0.6,0.4,1.0), vec4(1.0,0.2,0.6,1.0),
vec4(0.6,0.4,1.0,1.0), vec4(0.8,0.4,0.4,1.0), vec4(0.8,0.2,1.0,1.0), vec4(0.0,0.0,0.0,1.0), vec4(0.2,0.2,0.0,1.0), vec4(1.0,0.6,0.8,1.0),
vec4(0.0,0.4,1.0,1.0), vec4(0.6,0.8,0.0,1.0), vec4(0.8,0.0,0.2,1.0), vec4(0.0,0.0,0.6,1.0), vec4(0.0,0.8,0.6,1.0), vec4(0.6,0.6,1.0,1.0),
vec4(0.0,0.6,0.6,1.0), vec4(0.4,0.8,1.0,1.0), vec4(0.0,0.8,0.0,1.0), vec4(1.0,0.0,0.4,1.0), vec4(0.2,1.0,0.0,1.0), vec4(0.4,1.0,0.6,1.0),
vec4(0.2,0.8,0.2,1.0), vec4(0.2,0.0,0.0,1.0), vec4(0.6,0.8,1.0,1.0), vec4(1.0,0.4,0.0,1.0), vec4(0.4,0.6,0.6,1.0), vec4(0.4,0.6,0.2,1.0),
vec4(0.2,0.4,1.0,1.0), vec4(0.0,0.6,0.2,1.0), vec4(1.0,0.2,1.0,1.0), vec4(0.6,0.6,0.4,1.0), vec4(0.4,0.6,1.0,1.0), vec4(0.8,1.0,0.2,1.0),
vec4(0.2,1.0,0.8,1.0), vec4(0.0,1.0,0.8,1.0), vec4(0.4,0.8,0.4,1.0), vec4(0.2,0.4,0.0,1.0), vec4(0.2,0.4,0.2,1.0), vec4(0.8,0.8,1.0,1.0),
vec4(0.0,1.0,1.0,1.0), vec4(0.0,0.0,0.2,1.0), vec4(0.6,1.0,0.0,1.0), vec4(1.0,1.0,0.6,1.0), vec4(1.0,0.2,0.4,1.0), vec4(0.8,1.0,0.0,1.0),
vec4(0.0,0.2,0.8,1.0), vec4(1.0,1.0,0.2,1.0), vec4(0.0,0.8,1.0,1.0), vec4(0.8,0.8,0.4,1.0), vec4(1.0,0.4,0.4,1.0), vec4(0.0,0.4,0.0,1.0),
vec4(1.0,0.2,0.0,1.0), vec4(0.2,0.6,0.2,1.0), vec4(0.2,1.0,1.0,1.0), vec4(0.4,1.0,1.0,1.0), vec4(0.4,0.6,0.0,1.0), vec4(0.4,0.0,0.4,1.0),
vec4(0.4,0.2,1.0,1.0), vec4(0.8,0.6,0.8,1.0), vec4(0.6,0.2,0.6,1.0), vec4(0.2,0.4,0.8,1.0), vec4(0.4,0.0,1.0,1.0), vec4(0.6,0.8,0.4,1.0),
vec4(0.0,1.0,0.6,1.0), vec4(0.2,0.8,1.0,1.0), vec4(0.2,0.0,0.6,1.0), vec4(0.2,0.2,1.0,1.0), vec4(0.2,1.0,0.4,1.0), vec4(0.0,0.4,0.8,1.0),
vec4(0.0,0.4,0.2,1.0), vec4(0.2,0.6,0.0,1.0), vec4(0.4,0.4,1.0,1.0), vec4(0.2,0.6,0.6,1.0), vec4(0.4,0.4,0.8,1.0), vec4(1.0,0.6,0.2,1.0),
vec4(0.2,0.8,0.8,1.0), vec4(1.0,0.2,0.8,1.0), vec4(0.8,0.4,0.8,1.0), vec4(0.0,0.8,0.2,1.0), vec4(0.6,0.4,0.8,1.0), vec4(0.4,0.0,0.6,1.0),
vec4(0.2,0.2,0.2,1.0), vec4(0.2,0.2,0.8,1.0), vec4(0.6,0.8,0.2,1.0), vec4(0.2,0.0,1.0,1.0), vec4(0.8,0.0,0.8,1.0), vec4(0.8,0.6,0.2,1.0),
vec4(1.0,0.0,0.2,1.0), vec4(0.0,0.8,0.8,1.0), vec4(0.8,0.2,0.8,1.0), vec4(0.6,0.0,1.0,1.0), vec4(0.4,1.0,0.8,1.0), vec4(1.0,0.6,0.0,1.0),
vec4(0.8,0.6,0.4,1.0), vec4(1.0,0.8,1.0,1.0), vec4(0.8,0.0,0.6,1.0), vec4(1.0,0.8,0.2,1.0), vec4(0.4,0.4,0.4,1.0), vec4(1.0,0.2,0.2,1.0),
vec4(0.0,0.2,0.2,1.0), vec4(0.4,0.4,0.6,1.0), vec4(0.8,0.0,0.0,1.0), vec4(0.6,0.0,0.2,1.0), vec4(0.0,1.0,0.2,1.0), vec4(0.0,0.2,0.6,1.0),
vec4(0.8,0.8,0.0,1.0), vec4(0.6,0.4,0.0,1.0), vec4(0.4,0.2,0.2,1.0), vec4(0.8,0.2,0.4,1.0), vec4(0.0,1.0,0.0,1.0), vec4(0.6,0.6,0.0,1.0),
vec4(1.0,0.0,0.6,1.0), vec4(0.4,0.0,0.8,1.0), vec4(1.0,0.8,0.0,1.0), vec4(0.2,0.8,0.4,1.0), vec4(0.4,0.6,0.4,1.0), vec4(1.0,0.6,1.0,1.0),
vec4(0.4,0.8,0.2,1.0), vec4(1.0,0.4,0.6,1.0), vec4(1.0,1.0,0.8,1.0), vec4(0.0,0.4,0.4,1.0), vec4(0.2,0.0,0.4,1.0), vec4(0.2,0.8,0.6,1.0),
vec4(1.0,0.4,0.2,1.0), vec4(1.0,0.6,0.4,1.0), vec4(1.0,0.0,0.8,1.0), vec4(0.2,0.6,0.8,1.0), vec4(0.4,0.2,0.6,1.0), vec4(0.4,0.8,0.0,1.0),
vec4(0.8,0.2,0.2,1.0), vec4(0.2,0.2,0.4,1.0), vec4(0.4,0.2,0.0,1.0), vec4(1.0,0.8,0.8,1.0), vec4(0.6,1.0,0.8,1.0), vec4(0.6,0.2,1.0,1.0),
vec4(0.8,0.6,0.6,1.0), vec4(0.2,0.4,0.4,1.0), vec4(1.0,0.6,0.6,1.0), vec4(0.6,0.2,0.4,1.0), vec4(0.8,0.4,0.2,1.0), vec4(0.2,0.6,1.0,1.0),
vec4(0.4,0.4,0.2,1.0), vec4(0.0,0.0,0.4,1.0), vec4(0.6,0.0,0.8,1.0), vec4(0.8,1.0,1.0,1.0), vec4(0.6,0.4,0.2,1.0), vec4(0.2,0.2,0.6,1.0),
vec4(0.0,0.6,0.8,1.0), vec4(0.8,0.2,0.6,1.0), vec4(0.6,0.8,0.8,1.0), vec4(0.6,0.6,0.2,1.0), vec4(0.4,0.8,0.8,1.0), vec4(0.8,0.8,0.8,1.0),
vec4(0.8,0.8,0.2,1.0), vec4(0.0,0.0,0.8,1.0), vec4(1.0,0.4,1.0,1.0), vec4(0.6,0.2,0.8,1.0), vec4(0.0,0.2,0.0,1.0), vec4(0.0,0.6,0.0,1.0)
};

uniform usampler2D cluster_membership_texture;

void main()
{
    ivec2 global_idx;
    global_idx.x = int(gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x); // + 1 for padding
    global_idx.y = int(gl_WorkGroupID.y * gl_WorkGroupSize.y + gl_LocalInvocationID.y); // + 1 for padding

    uvec2 heightmap_size = imageSize(resulting_overlay);
    bool valid = global_idx.x < int(heightmap_size.x) && global_idx.y < int(heightmap_size.y);

    if(valid)
    {
        vec2 texture_coord = vec2(float(global_idx.x)/(heightmap_size.x-1), float(global_idx.y)/(heightmap_size.y-1));

        uint membership_idx = texture(cluster_membership_texture, texture_coord).r;
        vec4 resulting_color = COLORS[membership_idx];

        imageStore(resulting_overlay, global_idx, resulting_color);
    }

    memoryBarrierImage();
    barrier();
}

