#version 430

layout (local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, rgba32f) uniform coherent image2D resulting_overlay;

uniform usampler2D shade_texture;

vec4 shade_to_output_color(in uint shade)
{
    if(shade > 0) // Shaded
    {
        return vec4(0.01, 0.01, 0.01, .7);
    }
    else // Not shaded
    {
        return vec4(0.7,0.7,0.7,.7);
    }
}

void main()
{
    ivec2 global_idx;
    global_idx.x = int(gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x); // + 1 for padding
    global_idx.y = int(gl_WorkGroupID.y * gl_WorkGroupSize.y + gl_LocalInvocationID.y); // + 1 for padding

    uvec2 heightmap_size = imageSize(resulting_overlay);
    bool valid = global_idx.x < int(heightmap_size.x) && global_idx.y < int(heightmap_size.y);

    if(valid)
    {
        vec2 texture_coord = vec2(float(global_idx.x)/(heightmap_size.x-1), float(global_idx.y)/(heightmap_size.y-1));

        uint shade = 0;
        if(texture(shade_texture, texture_coord).r > 0)
        {
            shade = 1;
        }
        vec4 resulting_color = shade_to_output_color(shade);

        imageStore(resulting_overlay, global_idx, resulting_color);
    }

    memoryBarrierImage();
    barrier();
}

