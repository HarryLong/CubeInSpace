#ifndef SHADER_PROGRAM_H
#define SHADER_PROGRAM_H

#include <string>
#include "glheader.h"
#include <QFile>

class ShaderProgram
{
public:
    ShaderProgram(QString p_frag_shader_src_file, QString p_vertex_shader_src_file, QString p_name = QString::null); // construct from file
    ~ShaderProgram() {}

    bool compileAndLink(); //compile and link shaders
    QString getDescription() { return m_destription; }
    GLuint getProgramID() const { return m_program_id; }
    bool initialised() const {return m_shader_ready; }

private:
    GLuint m_program_id, m_fragment_shader_id, m_vertex_shader_id;
    bool m_shader_ready;
    QFile m_frag_shader, m_vertex_shader;
    QString m_destription;

    GLenum compile(GLenum p_shader_type, QByteArray & p_shader_src, GLuint & p_shader_id);
    GLenum link(GLuint p_program);
    bool compile_and_attach(QFile & shader_file, GLenum shader_type, GLuint & shader_id);
};

#endif
