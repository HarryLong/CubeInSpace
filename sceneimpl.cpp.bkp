#include "sceneimpl.h"

SceneImpl::SceneImpl()
{
    initializeBufferObjects();
}

SceneImpl::~SceneImpl()
{
}

void QCube::initializeVAO()
{
    if(!vaoInitialized)
    {
        vao->bind();

        vertexBuffer->bind();
        indexBuffer->bind();
        glEnableVertexAttribArray(0);
        glEnableVertexAttribArray(1);
        glVertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, (void*)0);
        glVertexAttribPointer(1, 4, GL_FLOAT, GL_FALSE, 0, (void*) (sizeof(float) * 4 * numberOfVertices));
        vertexBuffer->release();
        indexBuffer->release();

        vao->release();

        vaoInitialized = true;
    }
}

void QCube::initializeBufferObjects()
{
    // Coordinate Buffer
    vertexBuffer.create();
    vertexBuffer.setUsagePattern(QOpenGLBuffer::StaticDraw);
    vertexBuffer.bind();
    vertexBuffer.allocate(vertexData, sizeof(vertexData));
    vertexBuffer.release();

    // Index data
    indexBuffer.create();
    indexBuffer.setUsagePattern(QOpenGLBuffer::StaticDraw);
    indexBuffer.bind();
    indexBuffer.allocate(indexData, sizeof(indexData));
    indexBuffer.release();
}

void QCube::draw()
{
    if(vaoInitialized)
    {
        vao->bind();

        glDrawElements(GL_TRIANGLES, ARRAY_COUNT(indexData), GL_UNSIGNED_SHORT, 0);

        vao->release();
    }
    else
    {
        std::cout << "VAO IS NOT INITIALIZED" << std::endl;
        // TODO: Error message
    }
}

bool QCube::isVAOInitialized()
{
    return vaoInitialized;
}
